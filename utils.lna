catch {
    import javascript:console (console)
    import node:fs (fs)
    closure readFile {path} {
        fs readFileSync $path [dict (encoding utf8)]
    }
    import javascript:RegExp (RegExp)
    namespace regexp {
        macro test {re s} {
            RegExp test [RegExp new $re] $s
        }
        macro findAll {re s} {
            list $[tuple [RegExp Symbol.matchAll [RegExp new $re g] $s]](matches)
        }
        macro findAllGroups {re s} {
            list $[tuple [RegExp Symbol.matchAll [RegExp new $re g] $s]](groups)
        }
    }
} error _ {
    import go:slog (slog)
    import go:os (os)
    namespace console {
        set indent ""

        # Emulate the console object from JavaScript for the methods we use
        macro group {name} {
            slog Info $name
            set indent "  "
        }
        macro groupEnd {name} {
            set indent ""
        }
        macro time {name} {
            slog Info "${indent}${name} begin"
        }
        macro timeEnd {name} {
            slog Info "${indent}${name} end"
        }
        macro timeLog {name (?a "") (?b "") (?c "") (?d "") *} {
            slog Info "${indent}${name} ${a} ${b} ${c} ${d}"
        }
        macro log {a (?b "")} {
            slog Info "${a} ${b}"
        }
    }
    closure readFile {path} {
        os ReadFile $path
    }
    import go:regexp ((regexp go_regexp))
    namespace regexp {
        macro test {re s} {
            go_regexp MatchString [go_regexp Compile $re] $s
        }
        macro findAll {re s} {
            go_regexp FindAllStringSubmatch [go_regexp Compile $re] $s -1
        }
        proc findAllGroups {re s} {
            set result [list ()]
            set re [go_regexp Compile $re]
            set groupIndexes [dict ()]
            loop name [go_regexp SubexpNames $re] {
                if [string $name == ""] {continue}
                set groupIndexes [dict $groupIndexes add $name [go_regexp SubexpIndex $re $name]]
            }
            loop sm [go_regexp FindAllStringSubmatch $re $s -1] {
                set submatches $sm
                set groups [dict ()]
                dict $groupIndexes foreach (name index) {
                    set value $submatches[$index]
                    if [string $value != ""] {
                        set groups [dict $groups add $name $value]
                    }
                }
                set result [list $result append ($groups)]
            }
            return $result
        }
    }
}
export console
export readFile
export regexp