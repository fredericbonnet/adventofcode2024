import javascript:console (console)
import node:fs (fs)
load adventofcode2024/adventofcode2024 adventofcode2024
[string] eval {import adventofcode2024 ((splitString split))}
[list] eval {import adventofcode2024 (sortInts)}

# --- Day 20: Race Condition ---

console group "Part One"

set example "###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
"
set input $example
set minsaved 50

set input [fs readFileSync adventofcode2024/20.input.txt [dict (encoding utf8)]]
set minsaved 100

console time parse
set walls [dict ()]
macro wall {x y} {dict $walls has ${x},${y}}
set y 0
set x 0
set i 0
while {$i < [string $input length]} {
    when (string $input[$i] ==) {
        \n  {set (x y i width) (0 [$y + 1] [$i + 1] $x); continue}
        S   {set start $(x y)}
        E   {set end $(x y)}
        "#" {set walls [dict $walls add ${x},${y} true]}
    }
    set (x i) ([$x + 1] [$i + 1])
}
set height $y
console timeEnd parse

# Use generic maze algorithm although we can assume there's no deadend and another algorithm would be faster
#
# Maze = directed graph
# Vertices = (x,y)

macro makeMaze {} {
    namespace maze {
        macro coords {x y} {idem ${x},${y}}
        macro add {v1 v2} {
            set [coords $*v1] [list [next $v1] append ($v2)]
        }
        macro next {v} {get [coords $*v] ()}
    }
    set y 0
    while {$y <= $height} {
        set x 0
        while {$x <= $width} {
            if [wall $x $y] {
                set x [$x + 1]
                continue
            }
            if {! [wall [$x - 1] $y]} {
                maze add ($x $y) ([$x - 1] $y)
            }
            if {! [wall [$x + 1] $y]} {
                maze add ($x $y) ([$x + 1] $y)
            }
            if {! [wall $x [$y - 1]]} {
                maze add ($x $y) ($x [$y - 1])
            }
            if {! [wall $x [$y + 1]]} {
                maze add ($x $y) ($x [$y + 1])
            }        
            set x [$x + 1]
        }
        set y [$y + 1]
    }
}
console time compute
makeMaze

# Now that we have the graph, find the shorted path between S and E
macro getDistance {p} {dict $distances get [maze coords $*p] -1}
macro setDistance {p distance} {set distances [dict $distances add [maze coords $*p] $distance]}

macro computeDistances {} {
    set distances [dict ()]
    set current $start
    setDistance $current 0
    set nextNodes [list ($current)]
    while {[list $nextNodes length] > 0} {
        set current $nextNodes[0]
        set nextNodes [list $nextNodes remove 0 0]
        set distance [getDistance $current]
        list [maze next $current] foreach next {
            set nextDistance [getDistance $next]
            if [|| {$nextDistance < 0} {$nextDistance > [$distance + 1]}] {
                setDistance $next [$distance + 1]
                set nextNodes [list $nextNodes append ($next)]
            }
        }
    }
    getDistance $end
}
computeDistances

# List all cheats = walls separating two path tiles
set cheats [list ()]
dict $walls foreach (pos) {
    set (x y) [tuple [string $pos split ,]]
    set n [getDistance ($x [$y - 1])]
    set s [getDistance ($x [$y + 1])]
    if [&& {$n >= 0} {$s >= 0}] {
        set d [[$n > $s] ? [$n - $s] [$s - $n]]
        set cheats [list $cheats append ([$d - 2])]
    }
    set w [getDistance ([$x - 1] $y)]
    set e [getDistance ([$x + 1] $y)]
    if [&& {$w >= 0} {$e >= 0}] {
        set d [[$w > $e] ? [$w - $e] [$e - $w]]
        set cheats [list $cheats append ([$d - 2])]
    }
}
set nb 0
list [list $cheats sortInts] foreach cheat {
    if [$cheat >= $minsaved] {set nb [$nb + 1]}
}
console timeEnd compute
console log "result =" $nb # => result = 1497

console groupEnd "Part One"

# --- Part Two ---

console group "Part Two"

# List all cheats = path tiles at a distance <= 20
console time compute
namespace cheats {
    set nb 0
    macro add {x y x2 y2 d} {
        if {! [exists ${x},${y}:${x2},${y2}]} {
            set ${x},${y}:${x2},${y2} $d
            set nb [$nb + 1]
        }
    }
    macro nb {} {get nb}
}
set y 0
while {$y < $height} {
    console timeLog compute ${y}/$height
    set x 0
    while {$x < $width} {
        set d [getDistance ($x $y)]
        if [$d < 0] {
            set x [$x + 1]
            continue
        }

        set dy 0
        while {$dy <= 20} {
            set dx 0
            while {[set dd [$dx + $dy]] <= 20} {
                set (x2 y2) ([$x - $dx] [$y - $dy])
                set d2 [getDistance ($x2 $y2)]
                set d3 [$d + $dd]
                if {[$d2 - $d3] >= $minsaved} {cheats add $x $y $x2 $y2 [$d2 - $d3]}

                set (x2 y2) ([$x - $dx] [$y + $dy])
                set d2 [getDistance ($x2 $y2)]
                set d3 [$d + $dd]
                if {[$d2 - $d3] >= $minsaved} {cheats add $x $y $x2 $y2 [$d2 - $d3]}

                set (x2 y2) ([$x + $dx] [$y - $dy])
                set d2 [getDistance ($x2 $y2)]
                set d3 [$d + $dd]
                if {[$d2 - $d3] >= $minsaved} {cheats add $x $y $x2 $y2 [$d2 - $d3]}

                set (x2 y2) ([$x + $dx] [$y + $dy])
                set d2 [getDistance ($x2 $y2)]
                set d3 [$d + $dd]
                if {[$d2 - $d3] >= $minsaved} {cheats add $x $y $x2 $y2 [$d2 - $d3]}

                set dx [$dx + 1]
            }
            set dy [$dy + 1]
        }

        set x [$x + 1]
    }
    set y [$y + 1]
}
set result [cheats nb]
console timeEnd compute
console log "result =" $result # => result = 1030809

console groupEnd "Part Two"
