import adventofcode2024/utils.lna (console)

# --- Day 11: Plutonian Pebbles ---

console group "Part One"

set example [list (0 1 10 99 999)]
set input [source adventofcode2024/11.input.lna]

macro even {v} {catch {int [$v / 2]; true} error _ {false}}

proc blink {stones} {
    set newstones [list ()]
    list $stones foreach stone {
        set len [string $stone length]
        set newstones [list $newstones append [when {
            {$stone == 0} {list (1)}
            {even $len} {list (
                [int [string $stone range 0 [$len / 2 - 1]]]
                [int [string $stone replace 0 [$len / 2 - 1] ""]]
            )}
            {list ([$stone * 2024])}
        }]]
    }
}

console time compute
set stones $input
set i 0
while {$i < 25} {
    set stones [blink $stones]
    set i [$i + 1]
    console timeLog compute ${i}/25 => [list $stones length]
}
console timeEnd compute
console log "result =" [list $stones length] # => result = 186424

console groupEnd "Part One"

# --- Part Two ---

console group "Part Two"

namespace store {
    macro has {stone nb} {
        exists ${stone}:${nb}
    }
    macro value {stone nb} {
        get ${stone}:${nb}
    }
    macro add {stone nb len} {
        set ${stone}:${nb} $len
    }
}

proc stonelengths {stones nb} {
    set len 0
    list $stones foreach stone {
        set len [$len + [stonelength $stone $nb]]
    }
    get len
}
closure stonelength {stone nb} {
    if {[store has $stone $nb]} {
        store value $stone $nb
    } elseif {$nb == 0} {
        store add $stone $nb 1
    } else {
        store add $stone $nb [stonelengths [blink ($stone)] [$nb - 1]]
    }
}

console time compute
set stones $input
set i 0
while {$i <= 75} {
    set result [stonelengths $stones $i]
    console timeLog compute ${i}/75 => $result
    set i [$i + 1]
}
set result [stonelengths $stones 75]
console timeEnd compute
console log "result =" $result # => result = 219838428124832

console groupEnd "Part Two"
