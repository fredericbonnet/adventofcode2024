import javascript:console (console)
import node:fs (fs)
load adventofcode2024/adventofcode2024 adventofcode2024
[string] eval {import adventofcode2024 ((splitString split))}
[list] eval {import adventofcode2024 (sortStrings)}

# --- Day 23: LAN Party ---

console group "Part One"

set example "kh-tc
qp-kh
de-cg
ka-co
yn-aq
qp-ub
cg-tb
vc-aq
tb-ka
wh-tc
yn-cg
kh-ub
ta-co
de-co
tc-td
tb-wq
wh-td
ta-ka
td-qp
aq-cg
wq-ub
ub-vc
de-ta
wq-aq
wq-vc
wh-yn
ka-de
kh-ta
co-tc
wh-qp
tb-vc
td-yn
"
set input $example

set input [fs readFileSync adventofcode2024/23.input.txt [dict (encoding utf8)]]

console time parse
set nodes [dict ()]
set links [dict ()]
list [string $input split \n] foreach line {
    if [string $line == ""] {break}
    set (a b) [tuple [string $line split -]]
    set links [dict $links merge (${a}-${b} true ${b}-${a} true)]
    set la [get nodes($a) ()]
    set lb [get nodes($b) ()]
    set nodes [dict $nodes merge (
        $a [dict [get nodes($a) ()] add $b true] 
        $b [dict [get nodes($b) ()] add $a true] 
    )]
}
console timeEnd parse

console time compute
set nbt 0
set groups [dict ()]
dict $links foreach (link) {
    set (a b) [tuple [string $link split -]]
    dict $nodes($a) foreach (c) {
        if [dict $links has ${b}-${c}] {
            set (n1 n2 n3) [tuple [list ($a $b $c) sortStrings]]
            set key ${n1},${n2},${n3}
            if [! [dict $groups has $key]] {
                set groups [dict $groups add ${n1},${n2},${n3} true]
                if [|| [string $n1[0] == "t"] [string $n2[0] == "t"]  [string $n3[0] == "t"]] {
                    set nbt [$nbt + 1]
                }
            }
        }
    }
}
console timeEnd compute
console log "result =" $nbt # => result = 1149

console groupEnd "Part One"

# --- Part Two ---

console group "Part Two"

# Greedy algorithm is good enough
console time compute
set allcliques [dict ()]
set maxclique [dict ()]
dict $nodes foreach (first neighbors) {
    # if [dict $allcliques has $first] {continue}
    set clique [dict ($first true)]
    dict $neighbors foreach (next_) {
        set next $next_
        # if [dict $allcliques has $next] {continue}
        set all true
        dict $clique foreach (node) {
            if [! [dict $nodes($node) has $next]] {
                set all false
                break
            }
        }
        if $all {
            set clique [dict $clique add $next true]
        }
    }
    set allcliques [dict $allcliques merge $clique]
    if [[dict $clique size] > [dict $maxclique size]] {
        set maxclique $clique
    }
}
set password ""
list [list [dict $maxclique keys] sortStrings] foreach n {
    if [string $password == ""] {
        set password $n
    } else {
        set password ${password},${n}
    }
}
console timeEnd compute
console log "result =" $password # => result = as,co,do,kh,km,mc,np,nt,un,uq,wc,wz,yo

console groupEnd "Part Two"
